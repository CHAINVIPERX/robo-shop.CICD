pipeline {
    agent {
        node{
            label 'AGENT-1'
        }
    }
    // environment {
    //     GREETING = 'Hello Jenkins'
    // }

    //  parameters {
    //     string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

    //     text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

    //     booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

    //     choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

    //     password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    // }

    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm') 
            }
    parameters {
        choice(name: 'action', choices: ['apply','destroy'],description:'Pick one')
    }

    stages {
        stage('Initialization') {
            steps {
                sh """
                cd 1-vpc
                terraform init
                """
            }
        }
        stage('Plan'){
            steps{
                sh """
                cd 1-vpc
                terraform plan
                """
            }
        }
        stage('Deploy'){
            when{
                expression{
                    params.action == 'apply'
                }
            }
            input{
                message "Should Jenkins Continue?"
                ok "Yes,You should."
                // submitter ""
            }
                 steps{
                    sh """
                    cd 1-vpc 
                    terraform apply -auto-approve
                   """
            }
        }
        stage('Destroy'){
            when{
                expression{
                    params.action == 'destroy'
                }
            }
            input{
                message "Should Jenkins Continue?"
                ok "Yes,You should."
                // submitter ""
            }
                 steps{
                    sh """
                    cd 1-vpc 
                    terraform destroy -auto-approve
                   """
            }
        }
    }
    post {
        always {
            echo "Pipeline execution completed"
        }
        failure {
            echo "Pipeline Failed"
        }
        success{
            echo "Pipeline Success"
        }
    }
}