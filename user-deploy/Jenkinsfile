pipeline {
    agent {
        node{
            label 'AGENT-1'
        }
    }
    // environment {
    // //    packageVersion = ''
    //    nexusIp = ''
    // }
    options {
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
        ansiColor('xterm')
         }

    
     parameters {
        string(name: 'Version', defaultValue: '', description: 'What is artifact Version?')

        string(name: 'Environment', defaultValue: '', description: 'What is Environment?')

        string(name: 'Nexus_ip', defaultValue: '' , description: 'What is Nexus_ip?')

        booleanParam(name: 'Destroy' , defaultValue : 'false' , description: 'Do you want to destroy?')

        booleanParam(name: 'Create' , defaultValue : 'false' , description: 'Do you want to Create?')
        
    }
    

    stages {
        stage('Print Version') {
            steps {
              sh """
                    echo "version: ${params.Version}"
                    echo "environment: ${params.Environment}"
                """
            }
        }
    

    stage('Terraform Initialization'){
        steps {
            sh """
            cd user-deploy/terraform/
            terraform init --backend-config=${params.Environment}/backend.tf -reconfigure
            """
        }
    }

    stage('Terraform Plan'){
        steps {
            sh """
            cd user-deploy/terraform/
            terraform plan -var-file=${params.Environment}/${params.Environment}.tfvars -var="app_version=${params.Version} -var="nexus_ip=${params.Nexus_ip}"
            """
        }
    }
  

    stage('Terraform Apply'){
        when{
            expression{
                params.Create
            }
        }
        steps {
            sh """
            cd user-deploy/terraform/
            terraform apply -var-file=${params.Environment}/${params.Environment}.tfvars -var="app_version=${params.Version} -var="nexus_ip=${params.Nexus_ip}" -auto-approve
            """
        }
    }
    stage('Terraform Destroy'){
          when{
            expression{
                params.Destroy
            }
        }
        steps {
            sh """
            cd user-deploy/terraform/
            terraform destroy -var-file=${params.Environment}/${params.Environment}.tfvars -var="app_version=${params.Version} -var="nexus_ip=${params.Nexus_ip}" -auto-approve
            """
        }
    }

}



    post {
        always {
            echo "Pipeline execution completed"
             deleteDir()
        }
        failure {
            echo "Pipeline Failed"
        }
        success{
            echo "Pipeline Success"
        }
    }
}